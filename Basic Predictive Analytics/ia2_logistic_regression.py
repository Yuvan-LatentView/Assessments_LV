# -*- coding: utf-8 -*-
"""IA2_Logistic_Regression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lS3plLcaVaQvjONXa1cd5mTOcRNRIIzu
"""

import pandas as pd
import numpy as np

import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.preprocessing import MinMaxScaler,StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import LabelEncoder
import sklearn.metrics as metrics

from sklearn.metrics import r2_score,mean_squared_error

df = pd.read_csv('/content/booking.csv')
df

df.info()

df.isnull().sum()

df.dropna()

# dropping nulls because their significance is too low

# Outlier Detection

# Identify numerical columns by data type
numerical_columns = df.select_dtypes(include=['float64', 'int64']).columns

# Create a box plot for each numerical column
for column in numerical_columns:
    plt.figure(figsize=(10, 6))  # Set the figure size for better readability
    sns.boxplot(x=df[column])
    plt.title(f'Box Plot of {column}')
    plt.xlabel(column)
    plt.show()

# Label Encoding

# Initialize LabelEncoder
label_encoder = LabelEncoder()
categories = df.select_dtypes(include=['object']).columns

# Fit and transform the target column
for column in categories:
  if column == 'room type' or column == 'type of meal' or column == 'booking status':
    df[column] = label_encoder.fit_transform(df[column])
df

numerical_columns = df.select_dtypes(include=['float64', 'int64']).columns
# Compute the correlation matrix for numerical variables
correlation_matrix = df[numerical_columns].corr()
print("Correlation matrix:\n", correlation_matrix)

# Plot the correlation matrix as a heatmap
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, fmt=".2f", cmap='coolwarm')
plt.title('Heatmap of Correlation Matrix')
plt.show()

df.columns

X = df.drop(columns = ['Booking_ID', 'market segment type', 'date of reservation', 'booking status'])
y = df['booking status']

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=40)

scaler = MinMaxScaler()
# scaler.fit(X)
# scaler.transform(X)
X_train=pd.DataFrame(scaler.fit_transform(X_train[list(X.columns)]),
                                    columns=X.columns)
X_test=pd.DataFrame(scaler.transform(X_test[list(X.columns)]),
                                    columns=X.columns)

# Logistic Regression model
model = LogisticRegression()
model.fit(X_train, y_train)

# Predictions
y_pred = model.predict(X_test)
y_pred

# Evaluate the model
acc = metrics.accuracy_score(y_test, y_pred)
print("Accuracy:", acc)

pre = metrics.precision_score(y_test, y_pred)
print("Precision:", pre)

# Coefficients and intercept
rec = metrics.recall_score(y_test, y_pred)
print("Recall:", rec)

f1 = metrics.f1_score(y_test, y_pred)
print("F1 Score:", f1)

