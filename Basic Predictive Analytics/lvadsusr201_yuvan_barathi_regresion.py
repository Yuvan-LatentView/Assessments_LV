# -*- coding: utf-8 -*-
"""LVADSUSR201_Yuvan Barathi_Regresion.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TZs1xDNaS8Jro6nAYXgajFrMgi1OtFFm
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import StandardScaler, MinMaxScaler, LabelEncoder
import warnings
warnings.filterwarnings("ignore")

#Importing data

df = pd.read_csv("/content/Fare prediction.csv")
df

"""Feature Engineering"""

for i in range(len(df)):
  df['key'][i] = pd.to_numeric(df['key'][i][:2])
df

df['key'] = pd.to_numeric(df['key'], errors = 'coerce')

df.isnull().sum()

df.duplicated().sum()

df.dtypes

"""Exploratory Data Analysis"""

# Identify numerical columns by data type
numerical_columns = df.select_dtypes(include=['float64', 'int64']).columns

# Create a box plot for each numerical column to find outliers
for column in numerical_columns:
    plt.figure(figsize=(10, 6))  # Set the figure size for better readability
    sns.boxplot(x=df[column])
    plt.title(f'Box Plot of {column}')
    plt.xlabel(column)
    plt.show()

# Plot the correlation matrix as a heatmap
plt.figure(figsize=(10, 8))
sns.heatmap(df.corr(numeric_only=True), annot=True, fmt=".2f", cmap='coolwarm')
plt.title('Heatmap of Correlation Matrix')
plt.show()

# Initialize LabelEncoder

label_encoder = LabelEncoder()
encoded_df = df.copy()
categories = encoded_df.select_dtypes(include=['object']).columns

# Fit and transform the target column
for column in categories:
  encoded_df[column] = label_encoder.fit_transform(encoded_df[column])
encoded_df

encoded_df.columns

#Scaling the data using minmax scaler

scaler = MinMaxScaler()
scaled_df = encoded_df.drop(columns = ['fare_amount', 'pickup_longitude', 'pickup_latitude', 'dropoff_longitude', 'dropoff_latitude'])
scaler.fit(scaled_df)
scaled_df = scaler.transform(scaled_df)
#final_df = scaler.fit_transform(final_df[['imports']])
scaled_df = pd.DataFrame(scaled_df)
scaled_df.columns = encoded_df.drop(columns = ['fare_amount', 'pickup_longitude', 'pickup_latitude', 'dropoff_longitude', 'dropoff_latitude']).columns
print(scaled_df.head())

#Train test split and model prediction

X = scaled_df
y = df['key']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = LinearRegression()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
print("Mean Squared Error:", mse)

rmse = mean_squared_error(y_test, y_pred,squared=False)
print("Root Mean Squared Error:", rmse)

# Coefficients and intercept
print("Coefficients:", model.coef_)
print("Intercept:", model.intercept_)

r2_s = r2_score(y_test, y_pred)
print("R2 Score:", r2_s)