# -*- coding: utf-8 -*-
"""LVADSUSR201_Yuvan Barathi_Classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1huYmv2NP-slq1uspAU24RJHC-GU01a8_
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler, LabelEncoder, MinMaxScaler
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier as dt
from sklearn.metrics import accuracy_score, precision_score, recall_score, confusion_matrix

df = pd.read_csv('/content/penguins_classification.csv')
df

df.info()

df.isnull().sum()

#EDA to find skewness of bill_depth

sns.histplot(df['bill_depth_mm'])
plt.title('Histogram of bill_depth')
plt.xlabel('Bill Depth')
plt.ylabel('Frequency')
plt.show()

df['bill_depth_mm'].fillna(df['bill_depth_mm'].median(), inplace = True)
df.isnull().sum()

df.duplicated().sum()

# Identify numerical columns by data type
numerical_columns = df.select_dtypes(include=['float64', 'int64']).columns

# Create a box plot for each numerical column
for column in numerical_columns:
    plt.figure(figsize=(10, 6))  # Set the figure size for better readability
    sns.boxplot(x=df[column])
    plt.title(f'Box Plot of {column}')
    plt.xlabel(column)
    plt.show()

# Plot the correlation matrix as a heatmap
plt.figure(figsize=(10, 8))
sns.heatmap(df.corr(numeric_only=True), annot=True, fmt=".2f")
plt.title('Heatmap of Correlation Matrix')
plt.show()

df.columns

#Label encoding of object features

label_encoder = LabelEncoder()
df['species'] = label_encoder.fit_transform(df[['species']])
df['island'] = label_encoder.fit_transform(df[['island']])
df

df['species'].value_counts()

X = df.drop(['species', 'body_mass_g', 'bill_length_mm'], axis=1)
y = df['species']
X

#Train test split, model training adn prediction

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4, random_state=42)

model = dt()
model.fit(X_train, y_train)
y_pred = model.predict(X_test)
X_train

accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, pos_label=1)
recall = recall_score(y_test, y_pred, pos_label=1)
conf_matrix = confusion_matrix(y_test, y_pred)

print(f'Accuracy: {accuracy}')
print(f'Precision: {precision}')
print(f'Recall: {recall}')
print("******************************************************")
plt.title("Confusion Matrix")
sns.heatmap(conf_matrix,annot=True)
plt.xlabel('Predicted Labels')
plt.ylabel('True Labels')
plt.title('Confusion Matrix')