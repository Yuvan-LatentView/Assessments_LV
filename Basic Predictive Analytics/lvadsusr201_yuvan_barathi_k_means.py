# -*- coding: utf-8 -*-
"""LVADSUSR201_Yuvan Barathi_K-Means.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rrdQ-PdnGKbqqBSVVn6LsTz0jSzhcwJy
"""

import warnings
warnings.filterwarnings("ignore")
from sklearn.cluster import KMeans
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from matplotlib import pyplot as plt
import seaborn as sns
from sklearn.metrics import silhouette_score

df = pd.read_csv('/content/Mall_Customers.csv')
df

final_df = df.drop(columns = ['Gender'])
final_df

final_df.isnull().sum()

final_df.dropna(inplace = True)
final_df

for i in df.select_dtypes(include='number').columns:
    sns.boxplot(data=df,x=i)
    plt.show()

final_df.columns

# Generate scatter plots for pairs of numerical variables
numerical_columns = final_df.select_dtypes(include=['float64', 'int64']).columns
for i in range(len(numerical_columns)):
    for j in range(i + 1, len(numerical_columns)):
        if numerical_columns[i] != 'CustomerID' and numerical_columns[j] != 'CustomerID':
          plt.figure(figsize=(10, 6))
          sns.scatterplot(data=final_df, x=numerical_columns[i], y=numerical_columns[j])
          plt.title(f'Scatter Plot between {numerical_columns[i]} and {numerical_columns[j]}')
          plt.show()

scaler = MinMaxScaler()
scaled_df = final_df.copy()
scaler.fit(scaled_df)
scaled_df = scaler.transform(scaled_df)
#final_df = scaler.fit_transform(final_df[['imports']])
scaled_df = pd.DataFrame(scaled_df)
scaled_df.columns = final_df.columns
print(scaled_df.head())

sse = [] # The sum of Squared Errors =SSE
k_rng = range(1,10)
for k in k_rng:
   km = KMeans(n_clusters=k)
   km.fit(scaled_df)
   sse.append(km.inertia_)

plt.xlabel('K')
plt.ylabel('Sum of squared error')
plt.plot(k_rng,sse)

km = KMeans(n_clusters=4)
y_pred = km.fit_predict(scaled_df)
labels = km.labels_
print(y_pred)

scaled_df['cluster']=y_pred
print(scaled_df.head())

df1 = scaled_df[scaled_df.cluster==0]
df2 = scaled_df[scaled_df.cluster==1]
df3 = scaled_df[scaled_df.cluster==2]
df4 = scaled_df[scaled_df.cluster==3]
plt.scatter(df1['Age'], df1['Spending Score (1-100)'],color='green')
plt.scatter(df2['Age'], df2['Spending Score (1-100)'],color='red')
plt.scatter(df3['Age'], df3['Spending Score (1-100)'],color='black')
plt.scatter(df4['Age'], df4['Spending Score (1-100)'],color='blue')
plt.scatter(km.cluster_centers_[:,0],km.cluster_centers_[:,1],color='purple',marker='*',label='centroid')
plt.xlabel('Age')
plt.ylabel('Spending Score')
plt.legend()

silhouette_score(scaled_df, y_pred)