# -*- coding: utf-8 -*-
"""IA1_Linear_Regression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1C3mQYB60WKPNgL2jweATEszn650_000M
"""

#Importing the necessary libraries for the linear regression

import pandas as pd
import numpy as np

import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.preprocessing import MinMaxScaler,StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import LabelEncoder

from sklearn.metrics import r2_score,mean_squared_error

#Reading the csv file which contains the data

df = pd.read_csv('/content/expenses.csv')
df

#Basic information about the dataframe and the types of columns present

df.info()

"""Null values and outliers detection"""

#Checking for null values in the dataframe

df.isnull().sum()

df.columns

# Plot histograms for numerical columns to find the skewness of the column with null values

sns.histplot(df['bmi'])
plt.title(f'Histogram of bmi')
plt.xlabel('BMI')
plt.ylabel('Frequency')
plt.show()

#Using fillna method to fill the null values with the mean of bmi values as the distribution is normal

df['bmi'].fillna(df['bmi'].mean(), inplace = True)
df.isnull().sum()

# Using boxplot to find if there is any outliers in the data

numerical_columns = df.select_dtypes(include=['float64', 'int64']).columns

# Create a box plot for each numerical column
for column in numerical_columns:
    if column !='charges':
      plt.figure(figsize=(10, 6))  # Set the figure size for better readability
      sns.boxplot(x=df[column])
      plt.title(f'Box Plot of {column}')
      plt.xlabel(column)
      plt.show()

# Find the outliers in the variable with outliers using Q1, Q3, IQR

bmis = df['bmi']

# Calculate Q1, Q3, and IQR
q1 = np.percentile(bmis, 25)
q3 = np.percentile(bmis, 75)
iqr = q3 - q1

# Calculate outlier bounds
lower_bound = q1 - 1.5 * iqr
upper_bound = q3 + 1.5 * iqr

print("Q1:", q1)
print("Q3:", q3)
print("IQR:", iqr)
print("Lower Bound (Outlier):", lower_bound)
print("Upper Bound (Outlier):", upper_bound)

# Identify outliers
outliers = [bmi for bmi in bmis if bmi < lower_bound or bmi > upper_bound]
print("Outliers:", outliers)

# Generate scatter plots for pairs of numerical variables to find any linearity between variables
numerical_columns = df.select_dtypes(include=['float64', 'int64']).columns
for i in range(len(numerical_columns)):
    for j in range(i + 1, len(numerical_columns)):
        plt.figure(figsize=(10, 6))
        sns.scatterplot(data=df, x=numerical_columns[i], y=numerical_columns[j])
        plt.title(f'Scatter Plot between {numerical_columns[i]} and {numerical_columns[j]}')
        plt.show()

numerical_columns = df.select_dtypes(include=['float64', 'int64']).columns
# Compute the correlation matrix for numerical variables
correlation_matrix = df[numerical_columns].corr()
print("Correlation matrix:\n", correlation_matrix)

# Plot the correlation matrix as a heatmap
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, fmt=".2f", cmap='coolwarm')
plt.title('Heatmap of Correlation Matrix')
plt.show()

# Initialize LabelEncoder

label_encoder = LabelEncoder()
encoded_df = df.copy()
categories = encoded_df.select_dtypes(include=['object']).columns

# Fit and transform the target column
for column in categories:
  encoded_df[column] = label_encoder.fit_transform(encoded_df[column])
encoded_df

encoded_df.columns

X = encoded_df.drop(columns = ['charges', 'children'])
y = encoded_df['charges']

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=40)
print(X_train.shape)
print(y_train.shape)

scaler = MinMaxScaler()
# scaler.fit(X)
# scaler.transform(X)
X_train=pd.DataFrame(scaler.fit_transform(X_train[list(X.columns)]),
                                    columns=X.columns)
X_test=pd.DataFrame(scaler.transform(X_test[list(X.columns)]),
                                    columns=X.columns)

X_train.head()

# Linear Regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Predictions
y_pred = model.predict(X_test)
y_pred

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
print("Mean Squared Error:", mse)

rmse = mean_squared_error(y_test, y_pred,squared=False)
print("Root Mean Squared Error:", rmse)

# Coefficients and intercept
print("Coefficients:", model.coef_)
print("Intercept:", model.intercept_)

r2_s = r2_score(y_test, y_pred)
print("R2 Score:", r2_s)